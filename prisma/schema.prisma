// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String
  role          String         @default("user")
  password      String
  email         String         @unique
  emailVerified DateTime?
  image         String?
  address       Json?
  cart          Cart[]
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([provider, providerAccountId])
  @@index([userId])
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique @id
  userId       String   @default(cuid())
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Product {
  id               Int   @id @default(autoincrement())
  name             String
  slug             String @unique
  category         String
  images           Json?
  brand            String
  description      String
  stock            Int
  price            Decimal  @default("0.00")   
  rating           Decimal  @default("0.00")
  numReviews       Int      @default(0) 
  isFeatured       Boolean  @default(false)
  banner           String?
  createdAt        DateTime @default(now())                        
}

model Cart {
  id            String          @id @default(cuid())
  userId        String
  sessionCartId String
  items         Json            @default("[]")
  itemsPrice    Decimal
  shippingPrice Decimal
  taxPrice      Decimal
  totalPrice    Decimal
  createdAt     DateTime        @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


